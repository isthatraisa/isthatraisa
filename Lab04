#include <iostream>
#include "UnsortedType.cpp"
using namespace std;

int main()
{
   UnsortedType<int> S;

    cout<<"The length of the list is "<<S.LengthIs()<<endl;
    S.InsertItem(5);
    S.InsertItem(7);
    S.InsertItem(6);
    S.InsertItem(9);
    //S.InsertItem(1);
    S.Print();
    cout<<endl;
     cout<<"print the length of the list "<<S.LengthIs()<<endl;
     S.InsertItem(1);
     cout<<endl;
     S.Print();
     cout<<endl;
    int item=4;
    bool found;
    S.RetrieveItem(item,found);
    if(found)
        cout<<"Item is found"<<endl;
    else
        cout<<"Item is not found"<<endl;
    item=5;
    S.RetrieveItem(item,found);
    if(found)
        cout<<"Item is found"<<endl;
    else
        cout<<"Item is not found"<<endl;
        item=9;
    S.RetrieveItem(item,found);
    if(found)
        cout<<"Item is found"<<endl;
    else
        cout<<"Item is not found"<<endl;
        item=10;
    S.RetrieveItem(item,found);
    if(found)
        cout<<"Item is found"<<endl;
    else
        cout<<"Item is not found"<<endl;
    if(S.IsFull())
        cout<<"List is full"<<endl;
    else
        cout<<"List is not full"<<endl;
    S.DeleteItem(5);
    if(S.IsFull())
        cout<<"List is full"<<endl;
    else
        cout<<"List is not full"<<endl;
        S.DeleteItem(1);
        cout<<endl;
        cout<<"Print the list"<<endl;
        S.Print();
          S.DeleteItem(6);
          cout<<"Print the list"<<endl;
        S.Print();
   /* cout<<"Items in the list are "<<endl;
    for(int i=0; i<S.LengthIs(); i++)
    {
        int temp;
        S.GetNextItem(temp);
        cout<<temp<<" ";
    }
    cout<<endl;
    S.ResetList();
    if(S.IsFull())
        cout<<"List is full"<<endl;
    else
        cout<<"List is not full"<<endl;*/
    return 0;
}




.h file


#define UNSORTEDTYPE_H

const int MAX_ITEMS = 5;
template <class ItemType>
class UnsortedType
{
public :
    UnsortedType();
    ~UnsortedType();
    void MakeEmpty();
    bool IsFull();
    int LengthIs();
    void InsertItem(ItemType);
    void DeleteItem(ItemType);
    void RetrieveItem(ItemType&, bool&);
    void ResetList();
    void GetNextItem(ItemType&);
    void Print();
private:
    int length;
    ItemType info[MAX_ITEMS];
    int currentPos;
};
#endif // UNSORTEDTYPE_H




.cpp file


#include "UnsortedType.h"
#include <iostream>
using namespace std;

template <class ItemType>
UnsortedType<ItemType>::UnsortedType()
{
    length = 0;
    currentPos = -1;
}
template <class ItemType>
UnsortedType<ItemType>::~UnsortedType()
{
}
template <class ItemType>
void UnsortedType<ItemType>::MakeEmpty()
{
    length = 0;
    currentPos = -1;
}
template <class ItemType>
bool UnsortedType<ItemType>::IsFull()
{
    return (length==MAX_ITEMS);
}
template <class ItemType>
int UnsortedType<ItemType>::LengthIs()
{
    return length;
}
template <class ItemType>
void UnsortedType<ItemType>::InsertItem(ItemType
                                        item)
{
    if (length<MAX_ITEMS)
    {
        info[length] = item;
        length++;
    }
}
template <class ItemType>
void UnsortedType<ItemType>::DeleteItem(ItemType
                                        item)
{
    int i = 0;
    while (info[i]!=item && i<length) i++;
    if (i<length)
    {
        info[i] = info[length-1];
        length--;
    }
}
template <class ItemType>
void
UnsortedType<ItemType>::RetrieveItem(ItemType&
                                     item, bool& found)
{
    int i = 0;
    while (info[i]!=item && i<length) i++;
    if (i<length)
    {
        found = true;
        item = info[i];
    }
    else found = false;
}
template <class ItemType>
void UnsortedType<ItemType>::ResetList()
{
    currentPos = -1;
}
template <class ItemType>
void
UnsortedType<ItemType>::GetNextItem(ItemType&
                                    item)
{
    currentPos++;
    item = info[currentPos];
}
template <class ItemType>
void UnsortedType<ItemType>::Print()
{
    cout << "The items are: ";
    for (int i=0; i<length; i++)
    {
        cout << info[i] << "  ";
    }
}
